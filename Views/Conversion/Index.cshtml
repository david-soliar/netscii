@model ConversionViewModel
@using System.Linq
@{
    var format = Model.Format;
    ViewData["Title"] = $"Convert image to {format.ToUpperInvariant()}";
}

@section Head {
    <link rel='stylesheet' href='/css/conversion-form.css' />
}


<h1 class="mb-4">Convert Image to <span id="colorful-text">@format.ToUpperInvariant()</span></h1>

<form method="post" enctype="multipart/form-data" asp-controller="Conversion" asp-action="Index" class="row g-3 align-items-start justify-content-between">
    <div class="col-md-6">
        <fieldset id="image-container" class="mb-3">
            <label for="image" class="form-label">Select Image:</label>
            <input type="file" id="image" name="image" accept="image/*" class="form-control" required />
        </fieldset>

        <fieldset id="characters-container" class="mb-3">
            <label for="characters" class="form-label">Characters:</label>
            <input type="text" id="characters" name="characters" value="@Model.Characters" class="form-control" />
            <div class="form-text">Characters used for conversion</div>
        </fieldset>

        <fieldset id="scale-container" class="mb-3">
            <label for="scale" class="form-label">Scale (e.g., 8):</label>
            <input type="number" id="scale" name="scale" min="1" value="@Model.Scale" class="form-control" />
        </fieldset>

        <fieldset id="font-platform-container" class="mb-3">
            <fieldset id="font-container">
                <label for="font" class="form-label">Font:</label>
                <select id="font" name="font" class="form-select">
                    @foreach (var font in Model.Fonts)
                    {
                        <option style="font-family: @font;" value="@font" selected="@(font == Model.Font ? "selected" : null)">@font</option>
                    }
                </select>
            </fieldset>

            <fieldset id="platform-container">
                <label for="platform" class="form-label">Target Operating System:</label>
                <select id="platform" name="platform" class="form-select">
                    @foreach (var operatingSystem in Model.Platforms)
                    {
                        <option value="@operatingSystem" selected="@(operatingSystem == Model.Platform ? "selected" : null)">@operatingSystem</option>
                    }
                </select>
            </fieldset>
        </fieldset>
    </div>

    <fieldset class="col-md-4">
        <fieldset class="mb-4">
            <legend class="form-label d-block">Options:</legend>
            <div id="invert-container" class="form-check">
                <input type="checkbox" id="invert" name="invert" class="form-check-input" value="true" @(Model.Invert ? "checked" : "") />
                <label for="invert" class="form-check-label">Invert colors</label>
            </div>
            <div id="use-small-palette-container" class="form-check">
                <input type="checkbox" id="useSmallPalette" name="useSmallPalette" class="form-check-input" value="true" @(Model.UseSmallPalette ? "checked" : "") />
                <label for="useSmallPalette" class="form-check-label">Use 256 colors (old systems)</label>
            </div>
        </fieldset>

        <fieldset id="background-container" class="mb-2">
            <div class="mb-3">
                <label for="background" class="form-label">Background Color: (<span id="colorValueDisplay" style="font-weight: normal;"></span>)</label>
                <input type="color" id="background" name="background" value="@(string.IsNullOrWhiteSpace(Model.Background) ? "#000000" : Model.Background)" class="form-control form-control-color" title="Choose background color" @(Model.UseBackgroundColor ? "" : "disabled") />
            </div>

            <div class="form-check">
                <input type="checkbox" id="useBackgroundColor" name="useBackgroundColor" class="form-check-input" value="true" @(Model.UseBackgroundColor ? "checked" : "") />
                <label for="useBackgroundColor" class="form-check-label">Use Custom Color</label>
            </div>
        </fieldset>
    </fieldset>


    <div class="d-flex justify-content-end gap-2 mt-4">
        <button type="submit" class="btn btn-primary btn-click-effect btn-conversion-form">Convert</button>
        <button type="button" class="btn btn-light btn-click-effect btn-conversion-form" onclick="copyToClipboard(this, 'Copied')">Copy</button>
        @if (Model.Result != null && Model.Result.Length > 0)
        {
            <button type="button" class="btn btn-success btn-click-effect btn-conversion-form" onclick="openResultInNewTab()">
                Open Result in New Tab
            </button>
        }
    </div>
</form>

<h3 class="mt-5">Generated @format.ToUpperInvariant():</h3>

<div id="result-container" class="rounded p-3 bg-body text-body w-100 border border-primary">@if (Model.Result != null){ @Html.Raw(Model.Result) }</div>


@section Scripts {
    <script src='/js/conversion-form.js'></script>

    @switch (format)
    {
        case "svg":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("use-small-palette");
                    hideContainer("platform");
                });
            </script>
            break;
        case "ansi":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("font");

                    hideContainer("background");
                    hideContainer("characters");
                });
            </script>
            break;
        case "html":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("use-small-palette");
                    hideContainer("platform");
                });
            </script>
            break;
        case "latex":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("use-small-palette");
                    hideContainer("platform");
                });
            </script>
            break;
        case "rtf":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("use-small-palette");
                    hideContainer("platform");
                });
            </script>
            break;
        case "txt":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("font-platform");
                    hideContainer("background");
                    hideContainer("use-small-palette");
                });
            </script>
            break;
        case "emoji":
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    hideContainer("font-platform");
                    hideContainer("background");
                    hideContainer("characters");
                    hideContainer("use-small-palette");
                });
            </script>
            break;
        default:
            break;
    }
}
