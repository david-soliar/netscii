@model SuggestionViewModel
@{
    ViewData["Title"] = "Suggestions";
    var selected = Model.SelectedCategories;
}


<h1 class="mb-4">Suggestions</h1>

<form id="category-filter" method="get" asp-controller="Suggestion" asp-action="Index" class="mb-4">
    <label class="form-label d-block">Filter by categories:</label>

    <div class="d-flex flex-wrap align-items-start gap-2">
        <div class="d-flex flex-wrap gap-2">
            <input type="hidden" name="SelectedCategories" value="" />

            @for (int i = 0; i < Model.Categories.Count; i++)
            {
                var category = Model.Categories[i];
                var isChecked = selected.Contains(category);

                <input type="checkbox"
                       class="btn-check"
                       name="SelectedCategories"
                       value="@category"
                       id="cat-btn-@i"
                       autocomplete="off"
                @(isChecked ? "checked" : null) />

                <label class="btn @(isChecked ? "btn-success" : "btn-outline-danger")"
                       for="cat-btn-@i">
                    @category
                </label>
            }
        </div>

        <div class="ms-auto">
            <a class="btn btn-primary" asp-controller="Suggestion" asp-action="AddSuggestion">
                <i class="bi bi-plus-circle me-1"></i> Add Suggestion
            </a>
        </div>
    </div>
</form>


@if (Model.Suggestions != null && Model.Suggestions.Any())
{
    <div class="list-group mb-4">
        @foreach (var suggestion in Model.Suggestions)
        {
            var matches = suggestion.Categories.Intersect(selected).ToList();
            var isRelevant = matches.Count > 0 || selected.Count == 0;
            var fadedClass = isRelevant ? "" : "opacity-50";

            <div class="list-group-item @fadedClass">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@suggestion.Text</strong>
                        <div class="text-muted small">
                            <time datetime="@suggestion.CreatedAt.ToString("o")">
                                @suggestion.CreatedAt.ToString("g")
                            </time>
                        </div>
                    </div>
                    <div class="text-end">
                        @foreach (var category in suggestion.Categories)
                        {
                            var isSelected = selected.Contains(category);
                            var badgeClass = isSelected ? "bg-primary" : "bg-secondary";
                            <span class="badge @badgeClass mx-1">@category</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info">No suggestions available for selected categories.</div>
}

@section Scripts {
    <script src='/js/suggestion-form.js'></script>
}
