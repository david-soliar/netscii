// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using netscii.Models;

#nullable disable

namespace netscii.Migrations
{
    [DbContext(typeof(NetsciiContext))]
    [Migration("20250708084506_SuggestionsFix")]
    partial class SuggestionsFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("netscii.Models.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("netscii.Models.Entities.ConversionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConversionParametersId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutputLengthBytes")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProcessingTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConversionParametersId");

                    b.ToTable("ConversionActivities");
                });

            modelBuilder.Entity("netscii.Models.Entities.ConversionParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Characters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Invert")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Scale")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConversionParameters");
                });

            modelBuilder.Entity("netscii.Models.Entities.Font", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fonts");
                });

            modelBuilder.Entity("netscii.Models.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("netscii.Models.Entities.SuggestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SuggestionCategories");
                });

            modelBuilder.Entity("netscii.Models.Entities.SuggestionCategoryAssociation", b =>
                {
                    b.Property<int>("SuggestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuggestionCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SuggestionId", "SuggestionCategoryId");

                    b.HasIndex("SuggestionCategoryId");

                    b.ToTable("SuggestionCategoryAssociations");
                });

            modelBuilder.Entity("netscii.Models.Entities.ConversionActivity", b =>
                {
                    b.HasOne("netscii.Models.Entities.ConversionParameters", "ConversionParameters")
                        .WithMany("Activities")
                        .HasForeignKey("ConversionParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversionParameters");
                });

            modelBuilder.Entity("netscii.Models.Entities.SuggestionCategoryAssociation", b =>
                {
                    b.HasOne("netscii.Models.Entities.SuggestionCategory", "SuggestionCategory")
                        .WithMany("SuggestionAssociations")
                        .HasForeignKey("SuggestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netscii.Models.Entities.Suggestion", "Suggestion")
                        .WithMany("SuggestionCategoryAssociations")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("SuggestionCategory");
                });

            modelBuilder.Entity("netscii.Models.Entities.ConversionParameters", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("netscii.Models.Entities.Suggestion", b =>
                {
                    b.Navigation("SuggestionCategoryAssociations");
                });

            modelBuilder.Entity("netscii.Models.Entities.SuggestionCategory", b =>
                {
                    b.Navigation("SuggestionAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
